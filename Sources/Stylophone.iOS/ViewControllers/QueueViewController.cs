// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using Foundation;
using Microsoft.Toolkit.Mvvm.DependencyInjection;
using Stylophone.Common.Services;
using Stylophone.Common.ViewModels;
using Stylophone.iOS.Helpers;
using Strings = Stylophone.Localization.Strings.Resources;
using UIKit;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace Stylophone.iOS.ViewControllers
{
	public partial class QueueViewController : UITableViewController, IUITableViewDataSource, IUITableViewDelegate, IViewController<QueueViewModel>
	{
        private MPDConnectionService _mpdService;

        public QueueViewController (IntPtr handle) : base (handle)
		{
            _mpdService = Ioc.Default.GetRequiredService<MPDConnectionService>();
        }

        public QueueViewModel ViewModel => Ioc.Default.GetRequiredService<QueueViewModel>();
		public PropertyBinder<QueueViewModel> Binder => new(ViewModel);

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            ViewModel.PropertyChanged += UpdateListOnPlaylistVersionChange;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            var negateBoolTransformer = NSValueTransformer.GetValueTransformer(nameof(ReverseBoolValueTransformer));
            Binder.Bind<bool>(EmptyView, "hidden", nameof(ViewModel.IsSourceEmpty),
                valueTransformer: negateBoolTransformer);

            NavigationItem.RightBarButtonItem = CreateSettingsButton();

            TableView.DataSource = this;
            TableView.Delegate = this;

            //TableView.AllowsMultipleSelection = true;

            ViewModel.Source.CollectionChanged += (s, e) =>
            {
                if (e.Action == NotifyCollectionChangedAction.Reset)
                {
                    TableView.ReloadData();
                }
                else
                {
                    TableView.BeginUpdates();               

                    //Build a NSIndexPath array that matches the changes from the ObservableCollection.
                    var indexPaths = new List<NSIndexPath>();

                    if (e.Action == NotifyCollectionChangedAction.Add)
                    {
                        for (var i = e.NewStartingIndex; i < e.NewStartingIndex + e.NewItems.Count; i++)
                            indexPaths.Add(NSIndexPath.FromItemSection(i, 0));

                        TableView.InsertRows(indexPaths.ToArray(), UITableViewRowAnimation.Left);
                    }

                    if (e.Action == NotifyCollectionChangedAction.Remove)
                    {
                        for (var i = e.OldStartingIndex; i < e.OldStartingIndex + e.OldItems.Count; i++)
                            indexPaths.Add(NSIndexPath.FromItemSection(i, 0));

                        TableView.DeleteRows(indexPaths.ToArray(), UITableViewRowAnimation.Right);
                    }

                    TableView.EndUpdates();
                }
            };

            _mpdService.SongChanged += ScrollToPlayingSong;
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            ScrollToPlayingSong();
        }

        private void UpdateListOnPlaylistVersionChange(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(ViewModel.PlaylistVersion))
            {
                ScrollToPlayingSong();
            }
        }

        private void ScrollToPlayingSong(object sender = null, SongChangedEventArgs e = null)
        {
            // Scroll to currently playing song
            var playing = ViewModel.Source.Where(t => t.IsPlaying).FirstOrDefault();
            
            if (playing != null)
                UIApplication.SharedApplication.BeginInvokeOnMainThread(() =>
                TableView.ScrollToRow(NSIndexPath.FromRowSection(ViewModel.Source.IndexOf(playing), 0),
                    UITableViewScrollPosition.Middle, true));
        }

        public override nint RowsInSection(UITableView tableView, nint section)
        {
            return ViewModel.Source.Count;
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell("trackCell") as TrackViewCell;
            var trackViewModel = ViewModel?.Source[indexPath.Row];

            cell.Configure(indexPath.Row, trackViewModel);

            // Select the row if needed
            //var selectedIndexPaths = tableView.IndexPathsForSelectedRows;
            //var rowIsSelected = selectedIndexPaths != null && selectedIndexPaths.Contains(indexPath);
            //cell.Accessory = rowIsSelected ? UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None;

            return cell;
        }

        /*
        public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            tableView.CellAt(indexPath).Accessory = UITableViewCellAccessory.Checkmark;
        }

        public override void RowDeselected(UITableView tableView, NSIndexPath indexPath)
        {
            tableView.CellAt(indexPath).Accessory = UITableViewCellAccessory.None;
        }
        */

        public override UIContextMenuConfiguration GetContextMenuConfiguration(UITableView tableView, NSIndexPath indexPath, CoreGraphics.CGPoint point)
        {
            // The common commands take a list of objects
            var trackList = new List<object>();

            if (tableView.IndexPathsForSelectedRows == null)
            {
                trackList.Add(ViewModel?.Source[indexPath.Row]);
            }
            else
            {
                trackList = tableView.IndexPathsForSelectedRows.Select(indexPath => ViewModel?.Source[indexPath.Row])
                .ToList<object>();
            }

            var playAction = Binder.GetCommandAction(Strings.AppDescription, "play", ViewModel.PlayTrackCommand, trackList);
            var albumAction = Binder.GetCommandAction(Strings.AppDescription, "opticaldisc", ViewModel.ViewAlbumCommand, trackList);
            var playlistAction = Binder.GetCommandAction(Strings.AppDescription, "music.note.list", ViewModel.AddToPlayListCommand, trackList);

            var removeAction = Binder.GetCommandAction(Strings.AppDescription, "trash", ViewModel.RemoveFromQueueCommand, trackList);
            removeAction.Attributes = UIMenuElementAttributes.Destructive;

            return UIContextMenuConfiguration.Create(null, null, new UIContextMenuActionProvider((arr) => UIMenu.Create(new[] { playAction, albumAction, playlistAction, removeAction })));
        }

        private UIBarButtonItem CreateSettingsButton()
        {
            var addQueueAction = Binder.GetCommandAction(Strings.AddedToPlaylistText, "sdcard", ViewModel.SaveQueueCommand);
            var clearQueueAction = Binder.GetCommandAction(Strings.CantClearError, "trash", ViewModel.ClearQueueCommand);
            clearQueueAction.Attributes = UIMenuElementAttributes.Destructive;

            var barButtonMenu = UIMenu.Create(new[] { addQueueAction, clearQueueAction });
            return new UIBarButtonItem(UIImage.GetSystemImage("ellipsis.circle"), barButtonMenu);
        }
    }
}
