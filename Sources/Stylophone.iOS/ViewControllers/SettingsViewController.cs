// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using Microsoft.Toolkit.Mvvm.DependencyInjection;
using Stylophone.Common.ViewModels;
using Stylophone.iOS.Helpers;
using Stylophone.Localization.Strings;
using UIKit;

namespace Stylophone.iOS.ViewControllers
{
    public partial class SettingsViewController : UITableViewController, IViewController<SettingsViewModel>
    {

        public SettingsViewController(IntPtr handle) : base(handle)
        {
        }

        public SettingsViewModel ViewModel => Ioc.Default.GetRequiredService<SettingsViewModel>();
        public PropertyBinder<SettingsViewModel> Binder => new(ViewModel);

        public override async void AwakeFromNib()
        {
            base.AwakeFromNib();
            NavigationItem.LargeTitleDisplayMode = UINavigationItemLargeTitleDisplayMode.Always;
            Title = SettingsViewModel.GetHeader();

            // Init
            await ViewModel.EnsureInstanceInitializedAsync();
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Value Transformers
            var negateBoolTransformer = NSValueTransformer.GetValueTransformer(nameof(ReverseBoolValueTransformer));
            var intToStringTransformer = NSValueTransformer.GetValueTransformer(nameof(IntToStringValueTransformer));

            // Bindings
            Binder.Bind<string>(ServerHostnameField, "text", nameof(ViewModel.ServerHost), true);
            Binder.Bind<int>(ServerPortField, "text", nameof(ViewModel.ServerPort), true,
                valueTransformer: intToStringTransformer);
            Binder.Bind<string>(ServerInfoLabel, "text", nameof(ViewModel.ServerInfo));

            Binder.Bind<bool>(ServerConnectionIndicator, "animating", nameof(ViewModel.IsCheckingServer));
            Binder.Bind<bool>(ServerConnectedBox, "hidden", nameof(ViewModel.IsCheckingServer));

            Binder.Bind<bool>(ServerConnectionFailed, "hidden", nameof(ViewModel.IsServerValid));
            Binder.Bind<bool>(ServerConnectionSuccess, "hidden", nameof(ViewModel.IsServerValid),
                valueTransformer: negateBoolTransformer);

            Binder.Bind<bool>(AnalyticsToggle, "on", nameof(ViewModel.DisableAnalytics), true,
                valueTransformer: negateBoolTransformer);

            Binder.Bind<string>(VersionLabel, "text", nameof(ViewModel.VersionDescription));

            Binder.BindButton(ClearCacheButton, Resources.SettingsClearCache, ViewModel.ClearCacheCommand);
            Binder.BindButton(UpdateDatabaseButton, Resources.SettingsUpdateDatabase, ViewModel.RescanDbCommand);

            GithubButton.SetTitle(Resources.SettingsGithub, UIControlState.Normal);
            GithubButton.PrimaryActionTriggered += (s, e) =>
                UIApplication.SharedApplication.OpenUrl(new NSUrl(Resources.SettingsGithubLink));
        }
    }

}
