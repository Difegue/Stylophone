// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using CommunityToolkit.Mvvm.DependencyInjection;
using Stylophone.Common.ViewModels;
using Stylophone.iOS.Helpers;
using Stylophone.Localization.Strings;
using UIKit;
using System.Collections.ObjectModel;
using Stylophone.Common.ViewModels.Items;
using System.Collections.Specialized;
using Stylophone.iOS.Views;

namespace Stylophone.iOS.ViewControllers
{
    public partial class SettingsViewController : UITableViewController, IViewController<SettingsViewModel>
    {

        public SettingsViewController(ObjCRuntime.NativeHandle handle) : base(handle)
        {
        }

        public SettingsViewModel ViewModel => Ioc.Default.GetRequiredService<SettingsViewModel>();
        public PropertyBinder<SettingsViewModel> Binder => new(ViewModel);

        public override async void AwakeFromNib()
        {
            base.AwakeFromNib();
            NavigationItem.LargeTitleDisplayMode = UINavigationItemLargeTitleDisplayMode.Always;
            Title = SettingsViewModel.GetHeader();

            // Init
            await ViewModel.EnsureInstanceInitializedAsync();
        }

        // Localization not covered by LocalizedLabel
        public override string TitleForHeader(UITableView tableView, nint section)
        {
            return (int)section switch
            {
                0 => Resources.SettingsServer,
                1 => Resources.SettingsLocalPlaybackHeader,
                2 => Resources.SettingsOutputsHeader,
                3 => Resources.SettingsDatabase,
                4 => Resources.SettingsAnalytics,
                5 => Resources.SettingsAbout,
                _ => "",
            };
        }

        public override string TitleForFooter(UITableView tableView, nint section)
        {
            return (int)section switch
            {
                1 => Resources.SettingsLocalPlaybackText,
                2 => Resources.SettingsOutputsText,
                3 => Resources.SettingsAlbumArtText,
                4 => Resources.SettingsApplyOnRestart,
                _ => "",
            };
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Trick iOS into showing us the local network access prompt,
            // So that the user can accept/decline it before we actually try to connect to MPD servers.
            // cf. https://stackoverflow.com/questions/63940427/ios-14-how-to-trigger-local-network-dialog-and-check-user-answer
            var hostName = NSProcessInfo.ProcessInfo.HostName;

            // Value Transformers
            var negateBoolTransformer = NSValueTransformer.GetValueTransformer(nameof(ReverseBoolValueTransformer));
            var intToStringTransformer = NSValueTransformer.GetValueTransformer(nameof(IntToStringValueTransformer));

            // Bindings
            Binder.Bind<string>(ServerHostnameField, "text", nameof(ViewModel.ServerHost), true);
            Binder.Bind<int>(ServerPortField, "text", nameof(ViewModel.ServerPort), true,
                valueTransformer: intToStringTransformer);
            Binder.Bind<string>(ServerPasswordField, "text", nameof(ViewModel.ServerPassword), true);
            Binder.Bind<string>(ServerInfoLabel, "text", nameof(ViewModel.ServerStatus));

            Binder.Bind<bool>(ServerConnectionIndicator, "animating", nameof(ViewModel.IsCheckingServer));
            Binder.Bind<bool>(ServerConnectedBox, "hidden", nameof(ViewModel.IsCheckingServer));

            Binder.Bind<bool>(ServerConnectionFailed, "hidden", nameof(ViewModel.IsServerValid));
            Binder.Bind<bool>(ServerConnectionSuccess, "hidden", nameof(ViewModel.IsServerValid),
                valueTransformer: negateBoolTransformer);

            Binder.Bind<bool>(LocalPlaybackToggle, "enabled", nameof(ViewModel.IsStreamingAvailable));
            Binder.Bind<bool>(LocalPlaybackToggle, "on", nameof(ViewModel.IsLocalPlaybackEnabled), true);

            Binder.Bind<int>(LocalPlaybackPortField, "text", nameof(ViewModel.LocalPlaybackPort), true,
                valueTransformer: intToStringTransformer);

            Binder.Bind<bool>(AnalyticsToggle, "on", nameof(ViewModel.EnableAnalytics), true);
            Binder.Bind<bool>(AlbumArtToggle, "on", nameof(ViewModel.IsAlbumArtFetchingEnabled), true);

            Binder.Bind<string>(VersionLabel, "text", nameof(ViewModel.VersionDescription));

            Binder.BindButton(ClearCacheButton, Resources.SettingsClearCacheDescription, ViewModel.ClearCacheCommand);
            Binder.BindButton(UpdateDatabaseButton, Resources.SettingsUpdateDbTitle, ViewModel.RescanDbCommand);
            Binder.BindButton(RateButton, Resources.RateAppPromptTitle, ViewModel.RateAppCommand);

            GithubButton.SetTitle(Resources.SettingsGithub, UIControlState.Normal);
            GithubButton.PrimaryActionTriggered += (s, e) =>
                UIApplication.SharedApplication.OpenUrl(new NSUrl(Resources.SettingsGithubLink));

            ServerHostnameField.PrimaryActionTriggered += (s, e) => {
                ((UITextField)s).ResignFirstResponder();
                ViewModel.RetryConnection();
            };
            ServerPortField.PrimaryActionTriggered += (s, e) =>
            {
                ((UITextField)s).ResignFirstResponder();
                ViewModel.RetryConnection();
            };
            ServerPasswordField.PrimaryActionTriggered += (s, e) => {
                ((UITextField)s).ResignFirstResponder();
                ViewModel.RetryConnection();
            };

            var outputsDataSource = new ServerOutputsDataSource(ServerOutputsTable, ViewModel.Outputs);

            ServerOutputsTable.DataSource = outputsDataSource;
            ServerOutputsTable.Delegate = outputsDataSource;

        }
    }

    public class ServerOutputsDataSource : UITableViewDelegate, IUITableViewDataSource
    {
        private UITableView _tableView;
        private ObservableCollection<OutputViewModel> _sourceCollection;

        public ServerOutputsDataSource(UITableView tableView, ObservableCollection<OutputViewModel> source)
        {
            _tableView = tableView;
            _sourceCollection = source;

            _sourceCollection.CollectionChanged += (s, e) => UIApplication.SharedApplication.InvokeOnMainThread(
                () => UpdateUITableView(e));
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return _sourceCollection.Count;
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell("outputCell") as ServerOutputCell;

            if (_sourceCollection.Count <= indexPath.Row)
                return cell; // Safety check

            var outputViewModel = _sourceCollection[indexPath.Row];

            cell.Configure(indexPath.Row, outputViewModel);

            return cell;
        }

        // TODO make an extension of UITableView?
        private void UpdateUITableView(NotifyCollectionChangedEventArgs e)
        {
            if (e.Action == NotifyCollectionChangedAction.Reset)
            {
                _tableView.ReloadData();
            }
            else
            {
                _tableView.BeginUpdates();

                //Build a NSIndexPath array that matches the changes from the ObservableCollection.
                var indexPaths = new List<NSIndexPath>();

                if (e.Action == NotifyCollectionChangedAction.Add)
                {
                    for (var i = e.NewStartingIndex; i < e.NewStartingIndex + e.NewItems.Count; i++)
                        indexPaths.Add(NSIndexPath.FromItemSection(i, 0));

                    _tableView.InsertRows(indexPaths.ToArray(), UITableViewRowAnimation.Left);
                }

                if (e.Action == NotifyCollectionChangedAction.Remove)
                {
                    var startIndex = e.OldStartingIndex;

                    for (var i = startIndex; i < startIndex + e.OldItems.Count; i++)
                        indexPaths.Add(NSIndexPath.FromItemSection(i, 0));

                    _tableView.DeleteRows(indexPaths.ToArray(), UITableViewRowAnimation.Right);
                }

                _tableView.EndUpdates();
            }
        }

    }

}
