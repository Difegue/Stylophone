// This file has been autogenerated from a class added in the UI designer.

using System;
using System.ComponentModel;
using CoreGraphics;
using Foundation;
using SkiaSharp;
using SkiaSharp.Views.iOS;
using Stylophone.Common.ViewModels;
using Stylophone.iOS.Helpers;
using UIKit;

namespace Stylophone.iOS.ViewControllers
{
	public partial class AlbumCollectionViewCell : UICollectionViewCell
	{
		public AlbumCollectionViewCell (IntPtr handle) : base (handle)
		{
		}

        private PropertyBinder<AlbumViewModel> _propertyBinder;
        private AlbumViewModel _viewModel;

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            // Add corner radii
            ContentView.Layer.CornerRadius = 8;
            ContentView.Layer.BorderWidth = 1.0F;
            ContentView.Layer.BorderColor = UIColor.Clear.CGColor;
            ContentView.Layer.MasksToBounds = true;

            Layer.MasksToBounds = false;
            Layer.ShadowColor = UIColor.Black.CGColor;
            Layer.ShadowOpacity = 0.5F;
            Layer.ShadowOffset = new CGSize(0, 0);
            Layer.ShadowRadius = 4;
            Layer.ShadowPath = UIBezierPath.FromRoundedRect(Bounds, 8).CGPath;
        }

        public override void LayoutSubviews()
        {
            base.LayoutSubviews();

            // Adjust content and shadow to current bounds of cell
            var bounds = Bounds;
            ContentView.Bounds = bounds;
            Layer.ShadowPath = UIBezierPath.FromRoundedRect(bounds, 8).CGPath;
        }

        internal void Initialize(AlbumViewModel viewModel)
        {

            // Bind trackData
            _viewModel = viewModel;
            _propertyBinder?.Dispose();
            _propertyBinder = new PropertyBinder<AlbumViewModel>(viewModel);
            var negateBoolTransformer = NSValueTransformer.GetValueTransformer(nameof(ReverseBoolValueTransformer));

            if (viewModel != null)
            {
                AlbumArtist.Text = "...";

                _propertyBinder.Bind<string>(AlbumName, "text", nameof(viewModel.Name));
                _propertyBinder.Bind<string>(AlbumArtist, "text", nameof(viewModel.Artist));
                _propertyBinder.Bind<SKImage>(AlbumArt, "image", nameof(viewModel.AlbumArt),
                    valueTransformer: NSValueTransformer.GetValueTransformer(nameof(SkiaToUIImageValueTransformer)));

                _propertyBinder.Bind<bool>(ArtLoadingIndicator, "animating", nameof(viewModel.AlbumArtLoaded),
                    valueTransformer: negateBoolTransformer);
            }
        }
    }
}
