// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Foundation;
using Stylophone.Common.Helpers;
using Stylophone.Common.ViewModels;
using Stylophone.iOS.Helpers;
using UIKit;

namespace Stylophone.iOS.ViewControllers
{


    public partial class TrackViewCell : UITableViewCell
    {
        public TrackViewCell(IntPtr handle) : base(handle)
        {
        }

        private PropertyBinder<TrackViewModel> _propertyBinder;
        private UIContextMenuInteraction _contextMenuInteraction;
        private TrackViewModel _trackViewModel;

        internal void Configure(int row, TrackViewModel trackViewModel)
        {
            // Set background depending on the row number
            BackgroundColor = (row % 2 == 0) ? UIColor.SystemGray6Color : UIColor.Clear;

            // Bind trackData
            _trackViewModel = trackViewModel;
            _propertyBinder?.Dispose();
            _propertyBinder = new PropertyBinder<TrackViewModel>(trackViewModel);
            var negateBoolTransformer = NSValueTransformer.GetValueTransformer(nameof(ReverseBoolValueTransformer));

            if (trackViewModel != null)
            {
                Title.Text = trackViewModel.Name;
                Artist.Text = trackViewModel.File.Artist;

                AlbumTitle?.SetTitle(trackViewModel.File.Album, UIControlState.Normal);

                _propertyBinder.Bind<bool>(NowPlayingIndicator, "hidden", nameof(trackViewModel.IsPlaying),
                    valueTransformer: negateBoolTransformer);

                var time = trackViewModel.File.Time;
                Duration.Text = Miscellaneous.FormatTimeString(time * 1000);
            }

            // Remove the primaryaction in case it was already set and this cell is recycled
            if (AlbumTitle != null)
            {
                AlbumTitle.PrimaryActionTriggered -= ViewAlbum;
                AlbumTitle.PrimaryActionTriggered += ViewAlbum;
            }
        }

        private void ViewAlbum(object sender, EventArgs e)
        {
            _trackViewModel?.ViewAlbumCommand.Execute(_trackViewModel.File);
        }
    }
}
