// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CoreGraphics;
using Foundation;
using Microsoft.Toolkit.Mvvm.DependencyInjection;
using Strings = Stylophone.Localization.Strings.Resources;
using Stylophone.Common.ViewModels;
using Stylophone.iOS.Helpers;
using UIKit;

namespace Stylophone.iOS.ViewControllers
{
    public partial class FilePathViewModelHolder : NSObject
    {
        public FilePathViewModel ViewModel;
    }

    public partial class FoldersViewController : UICollectionViewController, IViewController<FoldersViewModel>
	{
        private FilePathViewModel _currentlyShownVm;
        private PropertyBinder<FilePathViewModel> _filePathBinder;
        private UICollectionViewDiffableDataSource<NSString, FilePathViewModelHolder> _dataSource;

        public FoldersViewModel ViewModel => Ioc.Default.GetRequiredService<FoldersViewModel>();
        public PropertyBinder<FoldersViewModel> Binder => new(ViewModel);

        public FoldersViewController (IntPtr handle) : base (handle)
		{
		}

        public override async void ViewDidLoad()
        {
            base.ViewDidLoad();
            NavigationItem.LargeTitleDisplayMode = UINavigationItemLargeTitleDisplayMode.Always;
            Title = FoldersViewModel.GetHeader();

            await InitTreeAsync();
        }

        public override async void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath)
        {
            collectionView.CellForItem(indexPath);
            var holder = _dataSource.GetItemIdentifier(indexPath);

            if (holder.ViewModel == null || holder.ViewModel.IsDirectory)
                await ShowFilePathAsync(holder.ViewModel);
            else
                holder.ViewModel.AddToQueueCommand.Execute(this);
        }

        public override UIContextMenuConfiguration GetContextMenuConfiguration(UICollectionView collectionView, NSIndexPath indexPath, CGPoint point)
        {
            var holder = _dataSource.GetItemIdentifier(indexPath);

            UIMenu menu = null;
            if (holder.ViewModel != null)
            {
                menu = GetMenuForViewModel(holder.ViewModel);
            }

            return UIContextMenuConfiguration.Create(null, null, new UIContextMenuActionProvider((arr) => menu));
        }

        private async Task InitTreeAsync()
        {
            await ViewModel.LoadDataAsync();

            _dataSource = new UICollectionViewDiffableDataSource<NSString, FilePathViewModelHolder>(CollectionView,
                new UICollectionViewDiffableDataSourceCellProvider(GetFilePathCell));

            await ShowFilePathAsync(null);
        }

        private UICollectionViewCell GetFilePathCell(UICollectionView collectionView, NSIndexPath indexPath, NSObject identifier)
        {
            var holder = identifier as FilePathViewModelHolder;
            var cell = CollectionView.DequeueReusableCell("FilePathCell", indexPath) as FilePathCell;
            cell.Initialize(holder.ViewModel, holder.ViewModel == _currentlyShownVm?.Parent);

            return cell;
        }

        private async Task ShowFilePathAsync(FilePathViewModel vm)
        {
            _filePathBinder?.Dispose();

            Title = vm?.Name ?? FoldersViewModel.GetHeader();

            _currentlyShownVm = vm;

            if (vm != null)
            {
                _filePathBinder = new PropertyBinder<FilePathViewModel>(vm);
                _filePathBinder.Bind<bool>(LoadingIndicator, "animating", nameof(vm.IsLoaded),
                    valueTransformer: NSValueTransformer.GetValueTransformer(nameof(ReverseBoolValueTransformer)));

                await vm.LoadChildrenAsync();
            }

            // Update datasource with loaded children
            UpdateDataSource();
        }

        private void UpdateDataSource()
        {
            var snapshot = new NSDiffableDataSourceSectionSnapshot<FilePathViewModelHolder>();
            
            if (_currentlyShownVm != null)
            {
                // Append a holder for the parent VM to make it our "back button"
                snapshot.AppendItems(new[] { new FilePathViewModelHolder { ViewModel = _currentlyShownVm.Parent } });

                var items = _currentlyShownVm.Children.Select(vm => new FilePathViewModelHolder { ViewModel = vm }).ToArray();
                snapshot.AppendItems(items);
            }
            else
            {
                var items = ViewModel.SourceData.Select(vm => new FilePathViewModelHolder { ViewModel = vm }).ToArray();
                snapshot.AppendItems(items);
            }

            _dataSource.ApplySnapshot(snapshot, new NSString("base"), true);
            UpdateSettingsButton();
        }

        private UIMenu GetMenuForViewModel(FilePathViewModel vm)
        {
            var playAction = Binder.GetCommandAction(Strings.ContextMenuPlay, "play.fill", vm.PlayCommand);
            var addToQueueAction = Binder.GetCommandAction(Strings.ContextMenuAddToQueue, "plus", vm.AddToQueueCommand);
            var addToPlaylistAction = Binder.GetCommandAction(Strings.ContextMenuAddToPlaylist, "music.note.list", vm.AddToPlaylistCommand);

            return UIMenu.Create(new[] { playAction, addToQueueAction, addToPlaylistAction });
        }

        private void UpdateSettingsButton()
        {
            if (_currentlyShownVm == null)
            {
                NavigationItem.RightBarButtonItem = null;
                return;
            }

            var barButtonMenu = GetMenuForViewModel(_currentlyShownVm);
            NavigationItem.RightBarButtonItem = new UIBarButtonItem(UIImage.GetSystemImage("ellipsis.circle"), barButtonMenu);
        }
    }

}
