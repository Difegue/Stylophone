// This file has been autogenerated from a class added in the UI designer.

using System;
using System.ComponentModel;
using CoreGraphics;
using Foundation;
using Microsoft.Toolkit.Mvvm.DependencyInjection;
using Stylophone.iOS.Helpers;
using Stylophone.iOS.ViewModels;
using UIKit;

namespace Stylophone.iOS.ViewControllers
{
	public partial class PlaybackViewController : UIViewController, IViewController<PlaybackViewModel>
	{
		public PlaybackViewController (IntPtr handle) : base (handle)
		{
		}

        public PlaybackViewModel ViewModel { get; private set; }
		public PropertyBinder<PlaybackViewModel> Binder { get; private set; }

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            // PlaybackVM is transient, so we need to initialize it explicitly.
            ViewModel = Ioc.Default.GetRequiredService<PlaybackViewModel>();
            Binder = new(ViewModel);

            ViewModel.PropertyChanged += OnVmPropertyChanged;

            // Bind
            var negateBoolTransformer = NSValueTransformer.GetValueTransformer(nameof(ReverseBoolValueTransformer));

            //Binder.Bind<UIImage>(AlbumArt, "image", nameof(ViewModel.AlbumArtNative));
            //Binder.Bind<UIImage>(AlbumBackground, "image", nameof(ViewModel.AlbumArtNative));
            //Binder.Bind<UIColor>(BackgroundTint, "backgroundColor", nameof(ViewModel.DominantColorNative));

            // Compact View Binding
            Binder.Bind<bool>(CompactView, "hidden", nameof(ViewModel.IsTrackInfoAvailable), valueTransformer: negateBoolTransformer);
            Binder.Bind<UIImage>(CompactView.AlbumArt, "image", nameof(ViewModel.AlbumArtNative));
            Binder.Bind<UIImage>(CompactView.AlbumBackground, "image", nameof(ViewModel.AlbumArtNative));
            Binder.Bind<UIImage>(CompactView.BackgroundTint, "backgroundColor", nameof(ViewModel.DominantColorNative));

            CompactView.AlbumArt.Layer.CornerRadius = 8;

            CompactView.PrevButton.PrimaryActionTriggered += (s, e) => ViewModel.SkipPrevious();
            CompactView.NextButton.PrimaryActionTriggered += (s, e) => ViewModel.SkipNext();
            CompactView.PlayPauseButton.PrimaryActionTriggered += (s, e) => ViewModel.ChangePlaybackState();
            CompactView.ShuffleButton.PrimaryActionTriggered += (s, e) => ViewModel.ToggleShuffle();
        }

        private void OnVmPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(ViewModel.CurrentTrack))
            {
                CompactView.Bind(ViewModel.CurrentTrack);
            }

            if (e.PropertyName == nameof(ViewModel.DominantColorNative))
                CompactView.CircularProgressView.BackgroundCircleColor = ViewModel.DominantColorNative;

            if (e.PropertyName == nameof(ViewModel.PlayButtonContent))
            {
                UpdateButton(CompactView.PlayPauseButton, ViewModel.PlayButtonContent);
            }

            if (e.PropertyName == nameof(ViewModel.VolumeIcon))
            {
                UpdateButton(CompactView.VolumeButton, ViewModel.VolumeIcon);
            }

            if (e.PropertyName == nameof(ViewModel.IsShuffleEnabled))
            {
                UpdateButton(CompactView.ShuffleButton, ViewModel.IsShuffleEnabled ? "shuffle.circle.fill" : "shuffle.circle");
            }

            if (e.PropertyName == nameof(ViewModel.CurrentTimeValue))
            {
                var progress = (float)(ViewModel.CurrentTimeValue / ViewModel.MaxTimeValue);
                CompactView.CircularProgressView.Progress = progress * 100;
            }
        }

        private void UpdateButton(UIButton button, string systemImg) =>
            button?.SetImage(UIImage.GetSystemImage(systemImg), UIControlState.Normal);
    }
}
