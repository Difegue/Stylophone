// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using Strings = Stylophone.Localization.Strings.Resources;
using Foundation;
using Stylophone.Common.ViewModels;
using UIKit;

namespace Stylophone.iOS.ViewControllers
{
    /// <summary>
    /// Combo DataSource/Delegate for UITableViews hosting TrackViewCells.
    /// </summary>
    public class TrackTableViewDataSource : UITableViewDelegate, IUITableViewDataSource
    {
        private UITableView _tableView;
        private Func<NSIndexPath, UIMenu> _menuFactory;
        private ObservableCollection<TrackViewModel> _sourceCollection;

        public TrackTableViewDataSource(IntPtr handle) : base(handle)
        {
        }

        public TrackTableViewDataSource(UITableView tableView, ObservableCollection<TrackViewModel> source,
            Func<NSIndexPath, UIMenu> contextMenuFactory, bool canSelectRows = false)
        {
            _tableView = tableView;
            _sourceCollection = source;
            _menuFactory = contextMenuFactory;

            _sourceCollection.CollectionChanged += UpdateUITableView;
            _tableView.AllowsMultipleSelection = canSelectRows;
        }

        private void UpdateUITableView(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.Action == NotifyCollectionChangedAction.Reset)
            {
                _tableView.ReloadData();
            }
            else
            {
                _tableView.BeginUpdates();

                //Build a NSIndexPath array that matches the changes from the ObservableCollection.
                var indexPaths = new List<NSIndexPath>();

                if (e.Action == NotifyCollectionChangedAction.Add)
                {
                    for (var i = e.NewStartingIndex; i < e.NewStartingIndex + e.NewItems.Count; i++)
                        indexPaths.Add(NSIndexPath.FromItemSection(i, 0));

                    _tableView.InsertRows(indexPaths.ToArray(), UITableViewRowAnimation.Left);
                }

                if (e.Action == NotifyCollectionChangedAction.Remove)
                {
                    for (var i = e.OldStartingIndex; i < e.OldStartingIndex + e.OldItems.Count; i++)
                        indexPaths.Add(NSIndexPath.FromItemSection(i, 0));

                    _tableView.DeleteRows(indexPaths.ToArray(), UITableViewRowAnimation.Right);
                }

                _tableView.EndUpdates();
            }
        }

        #region DataSource

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return _sourceCollection.Count;
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell("trackCell") as TrackViewCell;
            var trackViewModel = _sourceCollection[indexPath.Row];

            cell.Configure(indexPath.Row, trackViewModel);

            // Select the row if needed
            if (_tableView.AllowsMultipleSelection)
            {
                var selectedIndexPaths = tableView.IndexPathsForSelectedRows;
                var rowIsSelected = selectedIndexPaths != null && selectedIndexPaths.Contains(indexPath);
                cell.Accessory = rowIsSelected ? UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None;
            }

            return cell;
        }

        #endregion

        #region Delegate

        public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            if (tableView.AllowsMultipleSelection)
                tableView.CellAt(indexPath).Accessory = UITableViewCellAccessory.Checkmark;
        }

        public override void RowDeselected(UITableView tableView, NSIndexPath indexPath)
        {
            if (tableView.AllowsMultipleSelection)
                tableView.CellAt(indexPath).Accessory = UITableViewCellAccessory.None;
        }

        public override UIContextMenuConfiguration GetContextMenuConfiguration(UITableView tableView, NSIndexPath indexPath, CoreGraphics.CGPoint point)
        {
            var menu = _menuFactory.Invoke(indexPath);
            return UIContextMenuConfiguration.Create(null, null, new UIContextMenuActionProvider((arr) => menu));
        }

        #endregion
    }
}